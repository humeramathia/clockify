<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Task Manager</title>
    <link rel="stylesheet" href="/css/styles.css">

<body>
    <form method="post">
    <div class="container">

        <header>
            <div class="date-input">
    <label for="datePicker">Due Date:</label>
    <input type="date" id="datePicker" name="date">
</div>
            <!-- Dropdowns for selecting project, task, and user -->
            <select id="projectDropdown" name="project">
                <option value="">Select Project</option>
                <!-- Projects will be dynamically loaded here -->
            </select>
            <select id="taskDropdown" name="task">
                <option value="">Select Task</option>
                <!-- Tasks will be dynamically loaded here -->
            </select>
            <select id="userDropdown" name="user">
                <option value="">Choose User</option>
                <!-- Users will be dynamically loaded here -->
            </select>
        </header>

        <main>
            <!-- Input for adding a new task -->
            <div class="task-input">
                <input type="text" id="taskDescriptionInput" name="description" placeholder="Description">
                <button id="addTaskButton" type="submit">Add Task</button>
            </div>

            <div class="task-list">
                <!-- Dynamically generated task list will go here -->
            </div>
        </main>
    </div>


 <!-- Add this div to display the data -->
    <div id="dataDiv"></div>

   <input type="hidden" name="formToken" value="{{ token }}">
        </form>
<table class="task-table">
        <thead>
            <tr>
                <th>Date Created</th>
                <th>Project</th>
                <th>Task</th>
                <th>Description</th>

                <th>Date Due</th>
                <th>Priority</th>
                <th>Created By</th>
                <th>Assign To</th>
                <th>Task Status</th>
                <th>Timer</th>
                <th>Hours Worked</th>
                <th>Action</th>

            </tr>
        </thead>
        <tbody>
            <!-- Task rows will be dynamically generated here -->
        </tbody>
    </table>



    <script>
      // Get the token from the hidden input field and store it in a variable
let token = document.querySelector('input[name="formToken"]').value;

document.querySelector('form').addEventListener('submit', function(event) {
    event.preventDefault();

    // Remove the token from the form before creating the FormData object
    document.querySelector('input[name="formToken"]').remove();

    let formData = new FormData(event.target);
    let jsonObject = {};
    for (const [key, value]  of formData.entries()) {
        jsonObject[key] = value;
    }

    fetch('/capture', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(jsonObject)
    })
    .then(response => response.json())
    .then(data => console.log(data))
    .catch((error) => {
        console.error('Error:', error);
    });
});




fetch('/data')
    .then(response => response.json())
    .then(data => {
        // Create a table row for each item in the data array
        const tableBody = document.querySelector('.task-table tbody');
        tableBody.innerHTML = ''; // Clear the table body

        data.forEach(item => {
            const row = document.createElement('tr');

            // Add cells to the row
            row.innerHTML = `
                <td><input type="date" value="${new Date().toISOString().substr(0, 10)}"></td>
                <td><select class="projectDropdown"><option>${item.project}</option></td>
                <td><select class="taskDropdown"> <option>${item.task}</option></td>
                <td> <input type="text" class="descriptionInput" value="${item.description}">
</td>

<td><input type="date" value="${item.date ? item.date : ''}"></td>
<td></strong>
                    <select>
                        <option>High</option>
                        <option>Normal</option>
                        <option>Low</option>
                    </select></
</td>
<td><select id="createdByDropdown"></option></td>
<td><select id="assignedToDropdown"><option></option></td>
<td></strong>
                    <select>
                        <option>In Progress</option>
                        <option>Review</option>
                        <option>Finished</option>
                    </select>
</td>


<td><button id="startStopButton">Start</button></td>



                      <button class="save">Save Changes </button>
                        <button class="deleteButton">Delete</button> <!-- Add this line -->
                    </td>

<td data-id="${item.id}" style="display: none;">${item.someOtherProperty}</td>
<td>
`;


            // Append the row to the table body
            tableBody.appendChild(row);
        });
    })
    .catch(error => {
        console.error('Error:', error);
    });



        // Fetch the users and populate the user dropdowns
        fetch('/clockify/users')
            .then(response => response.json())
            .then(userNames => {
                const createdByDropdowns = document.querySelectorAll('#createdByDropdown');
                const assignedToDropdowns = document.querySelectorAll('#assignedToDropdown');
                userNames.forEach(userName => {
                    const option = document.createElement('option');
                    option.value = userName;
                    option.textContent = userName;
                    createdByDropdowns.forEach(dropdown => dropdown.appendChild(option.cloneNode(true)));
                    assignedToDropdowns.forEach(dropdown => dropdown.appendChild(option.cloneNode(true)));
                });
            });
        // Fetch the projects and populate the project dropdowns
        fetch('/clockify/projects/names')
            .then(response => response.json())
            .then(projectNames => {
                const projectDropdowns = document.querySelectorAll('.projectDropdown');
                projectNames.forEach(projectName => {
                    const option = document.createElement('option');
                    option.value = projectName;
                    option.textContent = projectName;
                    projectDropdowns.forEach(dropdown => dropdown.appendChild(option.cloneNode(true)));
                });


        document.querySelectorAll('.projectDropdown').forEach(dropdown => {
    dropdown.addEventListener('change', function () {
        const projectName = this.value;
        // Find the '.taskDropdown' within the same table row
        const taskDropdown = this.closest('tr').querySelector('.taskDropdown');
        fetch(`/clockify/projects/${encodeURIComponent(projectName)}/tasks`)
            .then(response => response.json())
            .then(taskNames => {
                taskDropdown.innerHTML = '<option value="">Select Task</option>'; // Reset tasks
                taskNames.forEach(taskName => {
                    const option = document.createElement('option');
                    option.value = taskName;
                    option.textContent = taskName;
                    taskDropdown.appendChild(option);
                });
            });
    });
});

       })


.catch(error => console.error('Error loading projects:', error));

let isRunning = false;
let timer = 0;
let intervalId = null;

function startTimer() {
    if (intervalId) {
        console.log('Timer is already running');
        return;
    }
    intervalId = setInterval(() => {
        timer++;
        console.log('Timer:', timer);
    }, 1000);
    isRunning = true;
}
function stopTimer() {
    if (!intervalId) {
        console.log('Timer is not running');
        return;
    }
    clearInterval(intervalId);
    intervalId = null;
    isRunning = false;
}

    let dataItem = document.querySelector('.dataItem');
    let taskData = {
        projectId: dataItem.querySelector('.projectDropdown').value,
        taskName: dataItem.querySelector('.taskDropdown').value,
        taskDescription: dataItem.querySelector('input[type="text"]').value,
    };


    function toggleTimer() {
    const button = document.getElementById('startStopButton');
    if (isRunning) {
        stopTimer();
        button.textContent = 'Start';

        // Calculate hours worked and display it in the "Hours Worked" cell
        const row = button.closest('tr');
        const hoursWorkedCell = row.querySelector('.hoursWorked');
        hoursWorkedCell.textContent = calculateHoursWorked(timer);
    } else {
        startTimer();
        button.textContent = 'Stop';
    }
}
document.getElementById('startStopButton').addEventListener('click', toggleTimer);
    function displayTime() {
        const minutes = Math.floor(timer / 60);
        const seconds = timer % 60;
        const timeString = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;

        // Update the timer element
        document.getElementById('timer').textContent = timeString;

        console.log(timeString);
    }









// Add event listener to the "Delete" button
    document.querySelector('.task-table').addEventListener('click', function (event) {
        if (event.target.classList.contains('deleteButton')) {
            console.log('Delete button clicked');

            // Get the table row that contains the clicked button
            const row = event.target.closest('tr');

            // Gather the data to be deleted
            const dataToBeDeleted = {
                id: row.querySelector('td[data-id]').getAttribute('data-id'),
            };

            console.log('Data to be deleted:', dataToBeDeleted);

            // Send a fetch request to the server to delete the data
            fetch('/delete-data', {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`,
                },
                body: JSON.stringify(dataToBeDeleted)
            })
                .then(response => {
                    console.log('Response:', response);
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        console.log('Data deleted successfully');
                    } else {
                        console.error('Error deleting data:', data.error);
                    }
                })
                .catch(error => console.error('Error:', error));
        }
    });


document.querySelector('.task-table').addEventListener('click', function (event) {
    if (event.target.classList.contains('save')) {
        console.log('Save button clicked');

        // Get the table row that contains the clicked button
        const row = event.target.closest('tr');

        // Gather the data to be updated
        const dataToBeUpdated = {
            id: row.querySelector('td[data-id]').getAttribute('data-id'),
            data: {
                description: row.querySelector('.descriptionInput').value,


            }
        };

        console.log('Data to be updated:', dataToBeUpdated);

        // Send a fetch request to the server to update the data
        fetch('/update-data', {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`,
            },
            body: JSON.stringify(dataToBeUpdated)
        })
        .then(response => {
            console.log('Response:', response);
            return response.json();
        })
        .then(data => {
            if (data.success) {
                console.log('Data updated successfully');
            } else {
                console.error('Error updating data:', data.error);
            }
        })
        .catch(error => console.error('Error:', error));
    }
});

</script>
    <script src="/js/app.js"></script>
</body>
</html>


